{"version":3,"sources":["collage.jpg","Navbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","navTitleStyle","marginRight","flexGrow","color","Navbar","useState","group","setGroup","AppBar","position","style","backgroundColor","Toolbar","ButtonGroup","Button","onClick","Typography","variant","topicStyle","paddingRight","paddingLeft","App","text","require","className","src","collage","alt","padding","topicDescription","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gFAAAA,EAAOC,QAAU,IAA0B,qC,02CCOrCC,EAAgB,CAClBC,YAAa,MACbC,SAAU,IACVC,MAAO,WAGI,SAASC,IAAU,IAAD,EACPC,mBAAS,QADF,mBAC1BC,EAD0B,KACnBC,EADmB,KAG/B,OACI,kBAACC,EAAA,EAAD,CAAQC,SAAS,QAAQC,MAAO,CAACC,gBAAiB,UAChD,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQC,QAAS,kBAAIR,EAAS,UAA9B,QACA,kBAACO,EAAA,EAAD,CAAQC,QAAS,kBAAIR,EAAS,UAA9B,QACA,kBAACO,EAAA,EAAD,CAAQC,QAAS,kBAAIR,EAAS,UAA9B,QACA,kBAACO,EAAA,EAAD,CAAQC,QAAS,kBAAIR,EAAS,UAA9B,SAEJ,kBAACS,EAAA,EAAD,CAAYC,QAAQ,KAAKP,MAAOV,GAAgBM,KCnB5D,IAAMY,EAAa,CACjBC,aAAa,OACbC,YAAY,QAiBCC,MAdf,WACE,IAAIC,EAAOC,EAAQ,IACnB,OACE,yBAAKC,UAAU,OACb,kBAACpB,EAAD,MACA,4BAAQoB,UAAU,cAChB,yBAAKC,IAAKC,IAASF,UAAU,WAAWG,IAAI,SAC5C,yBAAKjB,MAAO,CAACkB,QAAS,SACtB,kBAACZ,EAAA,EAAD,CAAYC,QAAQ,QAAQP,MAAOQ,GAAaI,EAAKO,qBCPzCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1f765715.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/collage.ce4d961d.jpg\";","import React, { useState } from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup'\n\nconst navTitleStyle = {\n    marginRight: '22%', \n    flexGrow: '1', \n    color: '#282c34',\n};\n\nexport default function Navbar() {\nconst [group, setGroup] = useState(\"GP 0\");\n\n  return (\n      <AppBar position=\"fixed\" style={{backgroundColor: 'white'}}>\n        <Toolbar>\n            <ButtonGroup>\n                <Button onClick={()=>setGroup(\"GP 0\")}>GP 0</Button>\n                <Button onClick={()=>setGroup(\"GP 1\")}>GP 1</Button>\n                <Button onClick={()=>setGroup(\"GP 2\")}>GP 2</Button>\n                <Button onClick={()=>setGroup(\"GP 3\")}>GP 3</Button>\n            </ButtonGroup>\n            <Typography variant=\"h6\" style={navTitleStyle}>{group}</Typography>\n        </Toolbar>\n      </AppBar>\n  );\n}","import React from 'react';\nimport collage from './collage.jpg';\nimport './App.css';\nimport Navbar from './Navbar.js'\nimport Typography from '@material-ui/core/Typography';\n\nconst topicStyle = {\n  paddingRight:'10em',\n  paddingLeft:'10em',\n};\n\nfunction App() {\n  var text = require('./text.json');\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <header className=\"App-header\">\n        <img src={collage} className=\"App-logo\" alt=\"logo\" />\n        <div style={{padding: '1em'}}/>\n        <Typography variant=\"body1\" style={topicStyle}>{text.topicDescription}</Typography>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}